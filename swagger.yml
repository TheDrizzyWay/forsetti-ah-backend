swagger: '2.0'
info:
    version: '1.0'
    title: Author's Haven.
    description: 'A Social platform for the creative at heart.'
schemes:
  - https
host: forsetti-ah-backend-staging.herokuapp.com
basePath: '/api/v1'
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
tags:
  - name: 'Authentication'
  - name: 'Users'
  - name: 'Articles'
  - name: 'Comments'
  - name: 'Profiles'

paths:
  /auth/signup:
    post:
      tags:
      - Authentication
      summary: "Register a new user on the application"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "New user that needs to be created on the application"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        201:
          description: "User registered successfully"
          example:
            status: 201
            message: "User registered successfully"
            data:
              - token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY1NmY4Y2Y4LWIwNzQtNDE1ZC04MDYxLWVjZDBkMzgzZjQ0NiIsImlhdCI6MTU1NDEwODc4MSwiZXhwIjoxNTU2NzAwNzgxfQ.e6K_0U36u3b16JFsAwcO1fJA0onVSKa1KRGQVFEhm3g"
                user:
                  firstname: "Zokky 2"
                  lastname: "Umeilechukwu"
                  email: "o.yes@gmail.com"
        503:
          description: "Some error occurred"
  /auth/signin:
    post:
      tags:
      - Authentication
      summary: "Sign in an existing user"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "An existing user that returns to be signed in"
        required: true
        schema:
          $ref: "#/definitions/UserSignin"
      responses:
        201:
          description: "Signed in successfully"
          example:
            status: 201
            message: "Signed in successfully"
            data:
              - user:
                  email: "o.yes@gmail.com"
                  password: "password"
        400:
          description: "Sign in with invalid credentials"
          example:
            status: 400
            message: "Invalid Credentials"
            data:
              - token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY1NmY4Y2Y4LWIwNzQtNDE1ZC04MDYxLWVjZDBkMzgzZjQ0NiIsImlhdCI6MTU1NDEwODc4MSwiZXhwIjoxNTU2NzAwNzgxfQ.e6K_0U36u3b16JFsAwcO1fJA0onVSKa1KRGQVFEhm3g"
                user:
                  email: "o.yes@gmail.com"
                  password: "password"
        503:
          description: "Some error occurred. Please try again"

  /auth/forgotpassword:
    post:
      tags:
      - Authentication
      summary: "Send reset password email to user"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Send email to user"
        required: true
        schema:
          $ref: "#/definitions/UserReset"
      responses:
        200:
          description: "Mail successfully sent"
          example:
            status: 200
            message: "Mail successfully sent"
        422:
          description: "Invalid email type"
          example:
            status: 422
            message: "Email value is invalid"
        503:
          description: "Some error occurred. Please try again"
  /auth/resetpassword:
    put:
      tags:
      - Authentication
      summary: "Reset user password"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "A user that wants to reset password"
        required: true
        schema:
          $ref: "#/definitions/Password"
      responses:
        200:
          description: "Password successfully reset"
          example:
            status: 200
            message: "Password changed successfully"
        422:
          description: "Invalid email type"
          example:
            status: 422
            message: "Password value is invalid"
        503:
          description: "Some error occurred. Please try again"
  /auth/facebook:
    get:
      description: 'This endpoint enables a user sign in with facebook'
      tags:
        - Authentication
      responses:
        200:
          description: 'Auto generated using Swagger Inspector'

  /auth/twitter:
    get:
      description: 'This endpoint enables a user sign in with twitter'
      tags:
        - Authentication
      responses:
        200:
          description: 'Auto generated using Swagger Inspector'

  /auth/google:
    get:
      description: 'This endpoint enables a user sign in with google'
      tags:
        - Authentication
      responses:
        200:
          description: 'Auto generated using Swagger Inspector'

  /users:
    get:
      summary: List users functionality
      description: This endpoint enables user to see list of other users profiles
      tags:
        - Users
      produces:
        - application/json
      schema:
        $ref: "#/definitions/'#/definitions/User"
      responses:
        200:
          description: "Successfully retrieved users profiles"
          example:
            status: 200
            message: "Successfully retrieved users"
            data:
              - count: 2
                rows:
                  - id: "b2b67e1e-d40c-47ef-8abf-62e1a330d4ef"
                    firstname: "Melanie"
                    username: "Melanie"
                    lastname: "Dara"
                    email: "melanie@dara.com"
                    roleId: "a11f440b-eae3-4d28-990d-700c7b965709"
                    social: null
                    image: null
                    bio: null
                    createdAt: "2019-04-11T14:36:19.347Z"
                    updatedAt: "2019-04-11T14:36:19.347Z"

                  - id: "b2b67e1e-d40c-47ef-8abf-62e1a330d4ef"
                    firstname: "Dimkpa"
                    username: "Melanie"
                    lastname: "Dara"
                    email: "melanie@dara.com"
                    roleId: "a11f440b-eae3-4d28-990d-700c7b965709"
                    social: null
                    image: null
                    bio: null
                    createdAt: "2019-04-11T14:36:19.347Z"
                    updatedAt: "2019-04-11T14:36:19.347Z"

  /users/role/:id:
    patch:
      summary: Handles updating the role of a user
      description: This endpoint enables superadmins to pass admin rights to certain users
      tags:
        - Users
      produces:
        - application/json
      security:
        - Bearer: []
      parameters:
        - in: path
          name: id
          required: true
          type: uuid
          description: Id of user.
      responses:
        200:
          description: User role has been updated successfully
          example:
            status: 200
            message: 'The user role has been changed to admin'
            data:
              id: b2b67e1e-d40c-47ef-8abf-62e1a330d4ef,
              firstname: Melanie,
              lastname: Dara,
              role: admin,
              updatedAt: 2019-04-03T13:16:56.044Z
        404:
          description: The user was not found in the database
          example:
            status: 404
            message: This user was not found.
        401:
          description: User could not be authenticated
          example:
            status: 401
            error: Access Denied. Please Log In.
        403:
          description: User does not have the permission to access this resource
          example:
            status: 403
            error: Access Denied. For Superadmins only.
        500:
          description: Internal server error
          example:
            status: 500
            error: Internal server error

  /profiles:
    patch:
      summary: 'Handles updating users profile.'
      description: 'This endpoint enables a user to edit his profile details and add a display image.'
      tags:
        - Profiles
      consumes:
        - multipart/form-data
      produces:
        - application/json
      security:
        - Bearer: []
      parameters:
        - in: formData
          name: body
          required: false
          description: 'This is the request body containing the profile details.'
          schema:
            $ref: '#/definitions/UpdateProfile'
        - in: formData
          name: file
          type: file
          required: false
          description: 'This contains the image to be uploaded'
          schema:
            $ref: '#/definitions/UpdateProfile'
      responses:
        200:
          description: Profile has been updated successfully
          example:
            status: 200
            message: Profile updated successfully.
            data:
              id: b2b67e1e-d40c-47ef-8abf-62e1a330d4ef,
              firstname: Melanie,
              lastname: Dara,
              username: melanie,
              email: melanie@dara.com,
              roleId: a11f440b-eae3-4d28-990d-700c7b965709,
              social: null,
              image: https://res.cloudinary.com/bukkyooo/image/upload/v1554716315/forsetti/xaj1zajnhvzvyvyvhg4g.jpg,
              bio: null,
              createdAt: 2019-04-08T09:12:32.126Z,
              updatedAt": 2019-04-08T09:29:45.522Z
        401:
          description: User could not be authenticated
          example:
            status: 401
            error: Access Denied. Please Log In.
        500:
          description: Internal server error
          example:
            status: 500
            error: Internal server error

  /profiles/:id:
    get:
      summary: Handles getting a users profile
      description: Gets the profile details of a user from the database
      tags:
        - Profiles
      produces:
        - application/json
      security:
        - Bearer: []
      parameters:
        - in: path
          name: id
          required: true
          type: uuid
          description: Id of user.
      responses:
        200:
          description: User profile has been retrieved successfully
          example:
            status: 200
            message: User profile found.
            data:
              firstname: Melanie
              lastname: Dara
              username: melanie
              bio: I am an Author
              image: https://res.cloudinary.com/yourusername/image/upload/v1549801942/forsetti/tbucxtfvdrexspiw0mby.jpg
              articlesWritten: 1 article written.
              articlesWrittenList:
                - slug: The-boy-drank-palm-wine-12345678
                  title: The boy drank palm wine
              articlesRead: You have read 0 articleSlug
              articlesReadList: []
        401:
          description: User could not be authenticated
          example:
            status: 401
            error: Access Denied. Please Log In.
        404:
          description: User with the given id was not found in the database
          example:
            status: 404
            error: No profile found for this user.
        500:
          description: Internal server error
          example:
            status: 500
            error: Internal server error

  /:slug/comment:
    post:
      tags:
      - "Comments"
      summary: "User can make a comment"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      security:
        - Bearer: []      
      parameters:
      - in: "body"
        name: "body"
        description: "comment made on an article"
        required: true
        schema:
          $ref: "#/definitions/Comment"
      responses:
        201:
          description: "user comment has been made successfully"
          example:
            status: 201
            message: "comment made successfully"
        422:
          description: "comment not sent"
          example:
            status: 422
            message: "comment is required"
        503:
          description: "Some error occurred. Please try again"
  /:slug/comment/:commentid/thread:
    post:
      tags:
      - "Comments"
      summary: "User can make a threaded comment"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      security:
        - Bearer: []
      parameters:
      - in: "body"
        name: "body"
        description: "comment made in a comment thread"
        required: true
      - in: "path"
        name: "slug"
        required: true
      - in: "path"
        name: "commentid"
        required: true
        schema:
          $ref: "#/definitions/Comment"
      responses:
        201:
          description: "thread comment added"
          example:
            status: 201
            message: "thread comment added"
        422:
          description: "comment not sent"
          example:
            status: 422
            message: "comment is required"
        503:
          description: "Some error occurred. Please try again"

  /articles/:slug/comment/:commentId:
    delete:
      summary: Handles deleting a comment
      description: Deletes a comment and it's thread comments from the database
      tags:
        - Comments
      produces:
        - application/json
      security:
        - Bearer: []
      parameters:
        - in: path
          name: slug
          required: true
          type: string
          description: slug of article containing the comment.
        - in: path
          name: comment Id
          required: true
          type: uuid
          description: Id of the comment to be deleted.
      responses:
        200:
          description: Comment has been deleted successfully
          example:
            status: 200
            message: Comment deleted.
            data: []
        404:
          description: Comment does not exist
          example:
            status: 404
            message: Comment not found.
        401:
          description: User could not be authenticated
          example:
            status: 401
            error: Access Denied. Please Log In.
  
  /articles:
    post:
      tags:
      - "Articles"
      summary: "User can create an article"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      security:
       - Bearer: []
      parameters:
      - in: "body"
        name: "body"
        description: "A new article to be created"
        required: true
        schema:
          $ref: "#/definitions/Articles"
      responses:
        201:
          description: "Article successfully created"
          example:
            status: 201
            message: "Article successfully created"
            data:
              - article:
                title: 'What is love'
                body: 'God is love'
                tags: ['art', 'love']
                description: 'It is real'
                published: true
                slug: 'what-is-love'
        400:
          description: "Article was not created successfully"
          example:
            status: 400
            message: "Article was not created successfully"
        503:
           description: "Some error occurred. Please try again"
    get:
      summary: Get all articles
      description: This endpoint enables user to get all articles
      tags:
        - "Articles"
      produces:
        - application/json
      schema:
        $ref: "#/definitions/'#/definitions/Articles"
      responses:
        200:
          description: "Articles successfully retrieved"
          example:
            status: 200
            message: "Articles successfully retrieved"
            data:
              - count: 1
                rows:
                  - id: 2816f31c-363a-4729-aea3-6429775fb57e
                    slug: The-boy-drank-palm-wine-1556539863647
                    title: 'This is a title from test'
                    description: 'This is a description from test'
                    body: 'This is from test'
                    published: true
                    image: 'https://res.cloudinary.com/forsetti/image/upload/v1554746740/forsetti/b9leichyadygoqudemre.jpg'
                    tagList:
                        - test
                        - app
                    readingTime: 'Content must be a string'
                    userId: 7139d3af-b8b4-44f6-a49f-9305791700f4
                    createdAt: '2019-04-29T12:11:03.648Z'
                    updatedAt: '2019-04-29T12:11:04.071Z'
                    author:
                        firstname: Mofe
                        lastname: Okoro
                        username: mofe002
                        bio: 'This is my bio .'
                        image: null
  /articles/search:
    post:
      tags:
      - Articles
      summary: "Should search and filter articles"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "tag, author and title"
        description: "Should search and filter articles by tag, author or title"
        required: true
      responses:
        200:
          description: "Articles found"
          example:
            status: 200
            message: "Articles found"
            data:
              count: "integer"
              rows:
              - slug: "Gildard is working on it-12345678"
                title: "Gildard is working on it"
                description: "gildard@dickson.com"
                body: "Dickson is a boy"
                image: null
                published: false
                tagList: null
              
        422:
          description: "No search parameters inputted"
          example:
            status: 422
            message: "No search parameters inputted"
        404:
          description: "Search result not found"
          example:
            status: 404
            message: "Search result not found"
  /articles/:slug:
    get:
      summary: Get one article
      description: Gets one article from the database
      tags:
        - Articles
      produces:
        - application/json
      parameters:
        - in: path
          name: slug
          required: true
          type: string
          description: Slug of article.
      responses:
        200:
          description: User profile has been retrieved successfully
          example:
            status: 200
            message: Article found.
            data:
            - id: 2160638d-f133-4c8a-bc90-83ff6c30117a
              slug: helllo-mee-lol-and-i-know-now-now-now-1556554286953
              title: helllo mee lol and i know now now now
              description: boy i dont kwewewe q jfjas
              body: i like seriously i dont knpw
              author:
                id: 3d1c5f17-7580-4cea-8647-99e7440c5d43
                username: Samorano
                bio: 
                image: 
              claps: 0 claps
              rating: 0
              readingTime: '0.03'
              comments: 0 comments

               
        401:
          description: User could not be authenticated
          example:
            status: 401
            error: Access Denied. Please Log In.
        404:
          description: User with the given id was not found in the database
          example:
            status: 404
            error: No profile found for this user.
        500:
          description: Internal server error
          example:
            status: 500
            error: Internal server error
    put:
      tags:
      - "Articles"
      summary: "User can edit an article"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      security:
       - Bearer: []
      parameters:
      - in: "path"
        name: "slug"
        description: "An article can be editable"
        required: true
      schema:
        $ref: "#/definitions/Articles"
      responses:
         200:
          description: "Article edited successfully"
          example:
            status: 200
            message: "Article edited successfully"
            data:
              - article:
                  title: 'This is an example of articles'
                  body: 'this is an example of a body of an article'
                  tags: ['art', 'love']
                  description: 'It is real'
                  published: true
                  slug: 'This is an example of articles-1234565'
         400:
          description: "Article was not edited successfully"
          example:
            status: 400
            message: "Article was not edited successfully"
         503:
          description: "Some error occurred. Please try again"
    delete:
      tags:
      - "Articles"
      summary: "User can delete his article"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      security:
       - Bearer: []
      parameters:
      - in: "path"
        name: "slug"
        description: "An article can be deleted"
        required: true
      responses:
        200:
          description: "Successfully deleted 1 article"
          example:
            status: 200
            message: "Successfully deleted 1 article"
        404:
          description: "Article not found"
          example:
            status: 404
            message: "Article not found"
        401:
          description: "Action restricted to author of article"
          example:
            status: 401
            message: "Action restricted to author of article"
        503:
          description: "Some error occurred. Please try again"
  /:slug/comment/:id:
    put:
      tags:
      - "Comments"
      summary: "User can edit a comment"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      security:
       - Bearer: []
      parameters:
      - in: "path"
        name: "slug"
        description: "A comment can be edited"
      - in: "path"
        name: "id"
        description: "comment id"
        required: true
      schema:
        $ref: "#/definitions/Comments"
      responses:
         200:
          description: "Comment successfully updated"
          example:
            status: 200
            message: "Comment successfully updated"
            data:
              - comment: "Team forsetti is the best"
         400:
          description: "Only the user of this comment can edit comment"
          example:
            status: 400
            message: "Only the user of this comment can edit comment"
         503:
          description: "Some error occurred. Please try again"
  /articles/:articleId/bookmark:
    post:
      tags:
      - Articles
      summary: "User can bookmark an article"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      security:
       - Bearer: []
      parameters:
      - in: "body"
        name: "body"
        description: "A new bookmark to be created"
        required: true
      - in: "path"
        name: "articleid"
        description: "A comment can be edited"
        required: true
        schema:
          $ref: "#/definitions/Articles"
      responses:
        201:
          description: "Bookmark successfully created"
          example:
            status: 201
            message: "Article has been successfully bookmarked"
            data:
              - bookmark:
                  id: 'c3c3f9c9-1c86-4ead-8fde-e365cdc19df6'
                  articleId: 'ddbc0491-f25b-44c1-a5df-25795fc7fada'
                  userId: '7139d3af-b8b4-44f6-a49f-9305791700f4'
                  updatedAt: '2019-04-11T08:58:42.684Z'
                  createdAt: '2019-04-11T08:58:42.684Z'
        200:
          description: "Bookmark successfully removed"
          example:
            status: 200
            message: "Bookmark successfully removed"
        503:
          description: "Some error occurred. Please try again"
  /articles/bookmark:
    get:
      tags:
      - Articles
      summary: "Get all bookmarks for a user"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      security:
       - Bearer: []
      responses:
        200:
          description: "user bookmarks successfully retrieved"
          example:
            status: 200
            message: "user bookmarks successfully retrieved"
            data:
                count: 1
                rows:
                  - id: '676af7e4-1dab-41b3-bcaa-9175d962f547'
                    articleId: 'efbd2ccd-4e06-4ecb-bfe0-baf303cd5587'
                    userId: '3d1c5f17-7580-4cea-8647-99e7440c5d103'
                    createdAt: '2019-04-15T18:38:03.745Z'
                    updatedAt: '2019-04-15T18:38:03.745Z'
                    Article:
                       id: 'efbd2ccd-4e06-4ecb-bfe0-b44f303cd5567'
                       slug: 'Gildard is working on it-12345678'
                       title: 'Gildard is working on it'
                       description: 'gildard@dickson.com'
                       body: 'Dickson is a boy'
                       image: null,
                       tagList: null,
                       createdAt: '2019-04-15T18:38:03.730Z'
                       updatedAt: '2019-04-15T18:38:03.730Z'
                    User:
                       username: 'Samorano'
                       email: 's.david@example.com'
        503:
          description: "Some error occurred. Please try again"
  /articles/topfeed:
    get:
      tags:
      - Articles
      summary: "Get top rated articles"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "Retrived all top rated articles feed"
          example:
            status: 200
            message: "Retrived all top rated articles feed"
            data:
                articles:
                  -  id: 'efbd2ccd-4e06-4ecb-bfe0-b44f303cd5567'
                     slug: 'Gildard is working on it-12345678'
                     title: 'Gildard is working on it'
                     description: 'gildard@dickson.com'
                     body: 'Dickson is a boy'
                     image: null,
                     tagList: null,
                     createdAt: '2019-04-15T18:38:03.730Z'
                     updatedAt: '2019-04-15T18:38:03.730Z'
                     author:
                       firstname: 'sam'
                       lastname: 'doe'
                       username: 'Samorano'
                       email: 's.david@example.com'
                     ratings: 1

                      
        503:
          description: "Some error occurred. Please try again"

  /articles/:articleId/claps:
    post:
      tags:
      - Articles
      summary: "Clap for an article"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      security:
       - Bearer: []
      parameters:
      - in: "body"
        name: "body"
        description: "User can clap for created articles"
        required: true
        schema:
          $ref: "#/definitions/Clap"
      responses:
        201:
          description: "Clap successfully created"
          example:
            status: 201
            message: "Clap successfully created"
            data:
              - token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY1NmY4Y2Y4LWIwNzQtNDE1ZC04MDYxLWVjZDBkMzgzZjQ0NiIsImlhdCI6MTU1NDEwODc4MSwiZXhwIjoxNTU2NzAwNzgxfQ.e6K_0U36u3b16JFsAwcO1fJA0onVSKa1KRGQVFEhm3g"
                user:
                  firstname: "Zokky 2"
                  lastname: "Umeilechukwu"
                  email: "o.yes@gmail.com"
        503:
          description: "Some error occurred"

  /profiles/followers:
    get:
      tags:
      - Profiles
      summary: "User can view the users following him"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      security:
       - Bearer: []
      description: "This endpoint enables another user to be able to view the users following him or her"
      responses:
        200:
          description: "Followers returned successfully"
          example:
            status: 200
            message: "Followers returned successfully"
            data:
              - followee: 'Dimkpa'
                followers:
                 id: 'ab32abe7-8233-482e-a6fe-d4ffab90c9be'
                 firstname: 'Joy'
                 lastname: 'Adam'
                 email: 'j.adam@example.com'
        401:
          description: "A user that is not authenticated makes request to view followers list"
          example:
            status: 401
            message: "Error in verification. Please try again"
  /profiles/followee:
    get:
      tags:
      - Profiles
      summary: "User can view the users he is following"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      security:
       - Bearer: []
      description: "This endpoint enables a user to be able to view those he is following"
      responses:
        200:
          description: "List of followees returned successfully"
          example:
            status: 200
            message: "List of followees returned successfully"
            data:
              - followee: 'Dimkpa'
                following:
                 id: 'ab32abe7-8233-482e-a6fe-d4ffab90c9be'
                 firstname: 'Joy'
                 lastname: 'Adam'
                 email: 'j.adam@example.com'
        401:
          description: "A user that is not authenticated makes request to view followers list"
          example:
            status: 401
            message: "Error in verification. Please try again"

  /profiles/:username/follow:
    post:
      tags:
      - Profiles
      summary: "User can follow another user"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      security:
       - Bearer: []
      parameters:
        - in: 'path'
          name: 'username'
          required: true
      description: "This endpoint enables another user to be added to a user followership list"
      responses:
        200:
          description: "A new follower has been added to the a users followership list"
          example:
            status: 200
            message: "Successfully followed user"
            data:
              - personToBeFollowed: 'Dimkpa'
                followers:
                - follower: 'mofe002'
        400:
          description: "A user makes request to follow another user more than once"
          example:
            status: 400
            message: "You cannot follow a user more than once"
        404:
          description: "A user makes request to follow another user that does not exist"
          example:
            status: 404
            message: "You cannot follow a user that does not exist"
        409:
          description: "A user makes request to follow self"
          example:
            status: 409
            message: "You cannot follow yourself"
    delete:
      tags:
      - Profiles
      summary: "User can unfollow another user"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      security:
       - Bearer: []
      parameters: 
      - in: "path"
        name: "slug"
        description: "A user should be able to unfollow another user"
        required: true
      description: "This endpoint enables another user to be removed from a user followership list"
      responses:
        200:
          description: "A new follower has been removed from the a users followership list"
          example:
            status: 200
            message: "Successfully unfollowed user"
            data:
              - personToBeUnFollowed: 'Dimkpa'
                followers:
                - follower: []
        400:
          description: "A user makes request to unfollow another user more than once"
          example:
            status: 400
            message: "You cannot unfollow a user more than once"
        404:
          description: "A user makes request to unfollow another user that does not exist"
          example:
            status: 404
            message: "You cannot follow a user that doesnt exist"
        409:
          description: "A user makes request to unfollow self"
          example:
            status: 409
            message: "You cannot unfollow yourself"
  /articles/tags:
    get:
      tags:
      - "Articles"
      summary: "User can get all tags"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      responses:
        200:
          description: "Tags successfully retrieved"
          example:
            status: 201
            message: "Tags successfully retrieved"
            data:
              tags:
                  name: 'politics'
              name: 'beauty'
        404:
          description: "No tags currently"
          example:
            status: 404
            message: "No tags currently"
        503:
          description: "Some error occurred. Please try again"

definitions:
  User:
    type: "object"
    properties:
      firstname:
        type: "string"
      lastname:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
    xml:
      name: "User"
  UserSignin:
    type: "object"
    properties:
      email:
        type: "string"
      password:
        type: "string"
    xml:
      name: "User"
  UserReset:
    type: "object"
    properties:
      email:
        type: "string"
    xml:
      name: "User"
  Password:
    type: "object"
    properties:
      password:
        type: "string"
        example: 'password123'
    xml:
      name: "User"

  Articles:
    type: "object"
    properties:
      title:
        type: "string"
      body:
        type: "string"
      description:
        type: "string"
      published:
        type: "boolean"
      tags:
        type: "array"
      slug:
        type: "string"
      userId:
        type: "string"
    xml:
      name: "Article"
  Share:
    type: "object"
    properties:
      email:
        type: "string"
        example: "john.doe@gmail.com"
  UpdateProfile:
    title: 'Update user profile.'
    type: object
    properties:
      firstname:
        description: 'The users firstname.'
        type: string
      lastname:
        description: 'The users lastname.'
        type: string
      username:
        description: 'The users username.'
        type: string
      bio:
        description: 'The users bio.'
        type: string
      image:
        description: 'The users display image.'
        type: file
    example:
      username: melanie002
      bio: This is my bio
  Comment:
    type: "object"
    properties:
      comment:
        type: "string"
  Clap:
    type: "string"
    properties:
      articleId:
         type: "string"
